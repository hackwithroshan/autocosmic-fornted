
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  profilePictureUrl: 'profilePictureUrl',
  joinDate: 'joinDate',
  wishlistProductIds: 'wishlistProductIds',
  recentlyViewedProductIds: 'recentlyViewedProductIds',
  isActive: 'isActive',
  isBlocked: 'isBlocked',
  lastLogin: 'lastLogin'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  fullName: 'fullName',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  isDefault: 'isDefault'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  last4: 'last4',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  brand: 'brand',
  isDefault: 'isDefault'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  price: 'price',
  mrp: 'mrp',
  imageUrl: 'imageUrl',
  images: 'images',
  hoverImageUrl: 'hoverImageUrl',
  isNew: 'isNew',
  isBestSeller: 'isBestSeller',
  rating: 'rating',
  description: 'description',
  tags: 'tags',
  occasion: 'occasion',
  emotion: 'emotion',
  sku: 'sku',
  stockQuantity: 'stockQuantity',
  brand: 'brand',
  gender: 'gender',
  isTaxable: 'isTaxable',
  specifications: 'specifications',
  vendor: 'vendor',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  publishStatus: 'publishStatus',
  longDescriptionHtml: 'longDescriptionHtml',
  bannerImageUrl: 'bannerImageUrl',
  bannerLink: 'bannerLink',
  faqs: 'faqs',
  categoryName: 'categoryName',
  subCategoryName: 'subCategoryName',
  weightKg: 'weightKg',
  dimensionsCm: 'dimensionsCm'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  attributes: 'attributes',
  price: 'price',
  stockQuantity: 'stockQuantity',
  sku: 'sku',
  imageUrl: 'imageUrl'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId'
};

exports.Prisma.VariantAttributeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  values: 'values'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  usageLimit: 'usageLimit',
  usageCount: 'usageCount',
  isActive: 'isActive',
  rules: 'rules'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  approved: 'approved'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  variantId: 'variantId',
  quantity: 'quantity'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orderDate: 'orderDate',
  customerName: 'customerName',
  totalAmount: 'totalAmount',
  status: 'status',
  shippingAddress: 'shippingAddress',
  trackingNumber: 'trackingNumber',
  paymentType: 'paymentType',
  deliveryType: 'deliveryType',
  deliveryCharge: 'deliveryCharge',
  appliedCouponCode: 'appliedCouponCode',
  discountAmount: 'discountAmount',
  transactionId: 'transactionId',
  paymentStatus: 'paymentStatus'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  quantity: 'quantity',
  priceAtPurchase: 'priceAtPurchase',
  variantSnapshot: 'variantSnapshot'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  status: 'status',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  messages: 'messages',
  assignedTo: 'assignedTo',
  seenByAdmin: 'seenByAdmin'
};

exports.Prisma.AdminActivityLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  adminUserId: 'adminUserId',
  adminUserName: 'adminUserName',
  action: 'action',
  ipAddress: 'ipAddress',
  details: 'details'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  message: 'message',
  timestamp: 'timestamp'
};

exports.Prisma.MediaFileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  size: 'size',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.HeroSlideScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  device: 'device',
  supertitle: 'supertitle',
  title: 'title',
  titleColor: 'titleColor',
  offerText: 'offerText',
  subtitle: 'subtitle',
  buttons: 'buttons',
  order: 'order',
  isActive: 'isActive'
};

exports.Prisma.ShoppableVideoScalarFieldEnum = {
  id: 'id',
  videoUrl: 'videoUrl',
  thumbnailUrl: 'thumbnailUrl',
  title: 'title',
  tag: 'tag',
  featuredProductIds: 'featuredProductIds'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  userImage: 'userImage',
  userName: 'userName',
  userHandle: 'userHandle',
  quote: 'quote',
  productImageUrl: 'productImageUrl',
  rating: 'rating',
  approved: 'approved'
};

exports.Prisma.OccasionContentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl'
};

exports.Prisma.CuratedLookScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imageUrl: 'imageUrl',
  productIds: 'productIds',
  description: 'description'
};

exports.Prisma.EmotionCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  emotionTag: 'emotionTag',
  imageUrl: 'imageUrl',
  description: 'description'
};

exports.Prisma.CmsPageScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  slug: 'slug',
  content: 'content',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  status: 'status',
  lastUpdated: 'lastUpdated',
  lastUpdatedBy: 'lastUpdatedBy',
  featuredImageUrl: 'featuredImageUrl'
};

exports.Prisma.FloatingInfoScalarFieldEnum = {
  id: 'id',
  corner: 'corner',
  text: 'text',
  triggerSectionId: 'triggerSectionId'
};

exports.Prisma.FashionGalleryImageScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  order: 'order',
  isActive: 'isActive'
};

exports.Prisma.GuidedDiscoveryPathScalarFieldEnum = {
  id: 'id',
  prompt: 'prompt',
  targetFilters: 'targetFilters'
};

exports.Prisma.SiteSettingsScalarFieldEnum = {
  id: 'id',
  singleton: 'singleton',
  storeSettings: 'storeSettings',
  seoSettings: 'seoSettings',
  themeSettings: 'themeSettings',
  headerLinks: 'headerLinks',
  footerSettings: 'footerSettings',
  integrations: 'integrations',
  categoryGridItems: 'categoryGridItems',
  topCategories: 'topCategories',
  promoGridItems: 'promoGridItems',
  authPageSettings: 'authPageSettings',
  deliveryReturnsHtml: 'deliveryReturnsHtml',
  productDeclarationHtml: 'productDeclarationHtml',
  helpContactHtml: 'helpContactHtml',
  sizeGuideHtml: 'sizeGuideHtml'
};

exports.Prisma.HomepageLayoutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  layout: 'layout'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  enabled: 'enabled',
  settings: 'settings'
};

exports.Prisma.FaqScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  order: 'order',
  isActive: 'isActive'
};

exports.Prisma.PaymentGatewayScalarFieldEnum = {
  id: 'id',
  name: 'name',
  enabled: 'enabled',
  settings: 'settings'
};

exports.Prisma.ShippingProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  enabled: 'enabled'
};

exports.Prisma.ShippingZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countries: 'countries',
  states: 'states',
  postcodes: 'postcodes'
};

exports.Prisma.ShippingRateScalarFieldEnum = {
  id: 'id',
  shippingZoneId: 'shippingZoneId',
  name: 'name',
  price: 'price',
  condition: 'condition',
  conditionValue: 'conditionValue'
};

exports.Prisma.MarketingCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  subject: 'subject',
  content: 'content',
  status: 'status',
  sentAt: 'sentAt',
  recipients: 'recipients'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  sender: 'sender',
  text: 'text',
  attachmentUrl: 'attachmentUrl',
  attachmentType: 'attachmentType',
  timestamp: 'timestamp'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  imageUrl: 'imageUrl',
  socials: 'socials',
  order: 'order'
};

exports.Prisma.StatItemScalarFieldEnum = {
  id: 'id',
  icon: 'icon',
  value: 'value',
  label: 'label',
  order: 'order'
};

exports.Prisma.PricingPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  frequency: 'frequency',
  features: 'features',
  isFeatured: 'isFeatured',
  buttonText: 'buttonText',
  buttonLink: 'buttonLink',
  order: 'order'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Address: 'Address',
  PaymentMethod: 'PaymentMethod',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  Category: 'Category',
  VariantAttribute: 'VariantAttribute',
  Coupon: 'Coupon',
  ProductReview: 'ProductReview',
  Cart: 'Cart',
  CartItem: 'CartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  SupportTicket: 'SupportTicket',
  AdminActivityLog: 'AdminActivityLog',
  ActivityLog: 'ActivityLog',
  MediaFile: 'MediaFile',
  HeroSlide: 'HeroSlide',
  ShoppableVideo: 'ShoppableVideo',
  Testimonial: 'Testimonial',
  OccasionContent: 'OccasionContent',
  CuratedLook: 'CuratedLook',
  EmotionCategory: 'EmotionCategory',
  CmsPage: 'CmsPage',
  FloatingInfo: 'FloatingInfo',
  FashionGalleryImage: 'FashionGalleryImage',
  GuidedDiscoveryPath: 'GuidedDiscoveryPath',
  SiteSettings: 'SiteSettings',
  HomepageLayout: 'HomepageLayout',
  Integration: 'Integration',
  Faq: 'Faq',
  PaymentGateway: 'PaymentGateway',
  ShippingProvider: 'ShippingProvider',
  ShippingZone: 'ShippingZone',
  ShippingRate: 'ShippingRate',
  MarketingCampaign: 'MarketingCampaign',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  TeamMember: 'TeamMember',
  StatItem: 'StatItem',
  PricingPlan: 'PricingPlan'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
