generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// USER AND AUTH MODELS
model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String    @unique
  password                 String
  role                     String    @default("USER") // USER or ADMIN
  phone                    String?
  dateOfBirth              DateTime?
  profilePictureUrl        String?
  joinDate                 DateTime  @default(now())
  wishlistProductIds       String[]  @db.ObjectId
  recentlyViewedProductIds String[]  @db.ObjectId
  isActive                 Boolean   @default(true) // For admin users
  isBlocked                Boolean   @default(false) // For customers
  lastLogin                DateTime?

  addresses      Address[]
  orders         Order[]
  supportTickets SupportTicket[]
  paymentMethods PaymentMethod[]
  reviews        ProductReview[]
  cart           Cart?
  chatSessions   ChatSession[]

  @@map("users")
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  type         String // "shipping" or "billing"
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model PaymentMethod {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  type        String // "card", "cod", "razorpay"
  last4       String
  expiryMonth String
  expiryYear  String
  brand       String
  isDefault   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

// PRODUCT AND E-COMMERCE MODELS
model Product {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  slug                String   @unique
  price               Float // Base selling price
  mrp                 Float // Max retail price
  imageUrl            String?
  images              String[]
  hoverImageUrl       String?
  isNew               Boolean  @default(false)
  isBestSeller        Boolean  @default(false)
  rating              Float?
  description         String
  tags                String[]
  occasion            String?
  emotion             String?
  sku                 String?  @unique
  stockQuantity       Int? // Base stock, for simple products
  brand               String?
  gender              String? // "Male", "Female", "Unisex"
  isTaxable           Boolean  @default(true)
  specifications      Json? // [{ "key": "Fabric", "value": "Cotton" }]
  vendor              String?
  metaTitle           String?
  metaDescription     String?
  publishStatus       String   @default("Draft") // "Draft", "Published", "Hidden"
  longDescriptionHtml String?
  bannerImageUrl      String?
  bannerLink          String?
  faqs                Json? // [{ "question": "...", "answer": "..." }]
  categoryName        String
  subCategoryName     String?

  // New shipping fields
  weightKg     Float?
  dimensionsCm Json? // { "length": 10, "width": 10, "height": 10 }

  variants   ProductVariant[]
  reviews    ProductReview[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model ProductVariant {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  productId     String  @db.ObjectId
  attributes    Json // { "Color": "Red", "Size": "M" }
  price         Float
  stockQuantity Int
  sku           String  @unique
  imageUrl      String?

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  parentId String? @db.ObjectId

  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[] @relation("SubCategories")

  @@map("categories")
}

model VariantAttribute {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique // e.g., "Size", "Color"
  values String[]

  @@map("variant_attributes")
}

model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  type        String // "percentage", "fixed_amount", "bogo"
  value       Float
  description String?
  startDate   DateTime?
  endDate     DateTime?
  usageLimit  Int?
  usageCount  Int?      @default(0)
  isActive    Boolean   @default(true)
  rules       String?

  @@map("coupons")
}

model ProductReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

// CART AND ORDER MODELS
model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String @db.ObjectId
  productId String @db.ObjectId
  variantId String @db.ObjectId
  quantity  Int

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String?  @db.ObjectId // Optional for guest checkouts
  orderDate         DateTime @default(now())
  customerName      String
  totalAmount       Float
  status            String // "Pending", "Processing", "Shipped", "Delivered", "Cancelled"
  shippingAddress   Json
  trackingNumber    String?
  paymentType       String?
  deliveryType      String?
  deliveryCharge    Float?
  appliedCouponCode String?
  discountAmount    Float?
  transactionId     String?
  paymentStatus     String? // "Success", "Failed", "Pending"

  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String @db.ObjectId
  productId       String @db.ObjectId
  variantId       String @db.ObjectId
  quantity        Int
  priceAtPurchase Float
  variantSnapshot Json

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

// SUPPORT AND LOGGING
model SupportTicket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  subject     String
  status      String // "Open", "In Progress", "Resolved", "Closed"
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  messages    Json[] // [{ sender, text, timestamp }]
  assignedTo  String?
  seenByAdmin Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model AdminActivityLog {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp     DateTime @default(now())
  adminUserId   String   @db.ObjectId
  adminUserName String
  action        String
  ipAddress     String?
  details       String?

  @@map("admin_activity_logs")
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  timestamp DateTime @default(now())

  @@map("activity_logs")
}

model MediaFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  size      Int
  type      String // "image" or "video"
  createdAt DateTime @default(now())

  @@map("media_files")
}

// DYNAMIC CONTENT AND CMS
model HeroSlide {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl   String
  device     String // "desktop" or "mobile"
  supertitle String?
  title      String?
  titleColor String?
  offerText  String?
  subtitle   String?
  buttons    Json[] // [{ text, link }]
  order      Int
  isActive   Boolean @default(true)

  @@map("hero_slides")
}

model ShoppableVideo {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  videoUrl           String
  thumbnailUrl       String
  title              String
  tag                String?
  featuredProductIds String[] @db.ObjectId

  @@map("shoppable_videos")
}

model Testimonial {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userImage       String
  userName        String
  userHandle      String?
  quote           String
  productImageUrl String?
  rating          Int?
  approved        Boolean @default(false)

  @@map("testimonials")
}

model OccasionContent {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  title       String
  description String
  imageUrl    String

  @@map("occasion_content")
}

model CuratedLook {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  imageUrl    String
  productIds  String[] @db.ObjectId
  description String

  @@map("curated_looks")
}

model EmotionCategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  emotionTag  String @unique
  imageUrl    String
  description String

  @@map("emotion_categories")
}

model CmsPage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  type             String // "page" or "post"
  title            String
  slug             String   @unique
  content          String
  metaTitle        String?
  metaDescription  String?
  status           String // "Published", "Draft"
  lastUpdated      DateTime @updatedAt
  lastUpdatedBy    String
  featuredImageUrl String?

  @@map("cms_pages")
}

model FloatingInfo {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  corner           String // "topLeft", "topRight", "bottomLeft", "bottomRight"
  text             String
  triggerSectionId String?

  @@map("floating_info")
}

model FashionGalleryImage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  order    Int
  isActive Boolean @default(true)

  @@map("fashion_gallery_images")
}

model GuidedDiscoveryPath {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  prompt        String
  targetFilters Json

  @@map("guided_discovery_paths")
}

// SITE SETTINGS AND CONFIGURATION
model SiteSettings {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  singleton              String  @unique @default("global_settings")
  storeSettings          Json
  seoSettings            Json
  themeSettings          Json
  headerLinks            Json[]
  footerSettings         Json
  integrations           Json
  categoryGridItems      Json[]
  topCategories          Json[]
  promoGridItems         Json[]
  authPageSettings       Json?
  deliveryReturnsHtml    String?
  productDeclarationHtml String?
  helpContactHtml        String?
  sizeGuideHtml          String?

  @@map("site_settings")
}

model HomepageLayout {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  layout Json[]

  @@map("homepage_layouts")
}

model Integration {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique // "Facebook Pixel", "Razorpay", etc.
  category String // "Marketing", "Payments", "Shipping"
  enabled  Boolean
  settings Json

  @@map("integrations")
}

model Faq {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String
  order    Int
  isActive Boolean @default(true)

  @@map("faqs")
}

model PaymentGateway {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  enabled  Boolean
  settings Json // Example for Razorpay: { "apiKey": "...", "apiSecret": "..." }. Example for PhonePe: { "merchantId": "...", "saltKey": "..." }

  @@map("payment_gateways")
}

model ShippingProvider {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique
  apiKey    String?
  apiSecret String?
  enabled   Boolean

  @@map("shipping_providers")
}

model ShippingZone {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  countries String[]
  states    String[]
  postcodes String[]
  rates     ShippingRate[]

  @@map("shipping_zones")
}

model ShippingRate {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  shippingZoneId String  @db.ObjectId
  name           String
  price          Float
  condition      String? // "min_order_value", "weight_based"
  conditionValue Float?

  zone ShippingZone @relation(fields: [shippingZoneId], references: [id], onDelete: Cascade)

  @@map("shipping_rates")
}

model MarketingCampaign {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String // "email", "push"
  subject    String?
  content    String
  status     String // "Draft", "Sent", "Active"
  sentAt     DateTime?
  recipients Int?

  @@map("marketing_campaigns")
}

model ChatSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId      String   @db.ObjectId
  sender         String // "user" or "admin"
  text           String?
  attachmentUrl  String?
  attachmentType String? // "image" or "file"
  timestamp      DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// HOMEPAGE EDITOR COMPONENTS
model TeamMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  title    String
  imageUrl String
  socials  Json // { twitter, linkedin }
  order    Int?

  @@map("team_members")
}

model StatItem {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  icon  String
  value Int
  label String
  order Int?

  @@map("stat_items")
}

model PricingPlan {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      String
  frequency  String
  features   String[]
  isFeatured Boolean
  buttonText String
  buttonLink String
  order      Int?

  @@map("pricing_plans")
}
